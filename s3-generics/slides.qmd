---
title: "S3 object system"
format: 
  revealjs:
    #highlight-style: gruvbox-dark
    theme: [dark, styles.scss]
    incremental: true
    include-in-header: "highlighting.html"
echo: true
output-location: fragment
---

<!-- https://journal.r-project.org/archive/2020/RJ-2020-028/RJ-2020-028.pdf#page=5&zoom=100,132,296 -->

## We'll cover:

-   Objects in R
-   Atomic vectors
-   the posers: data.frame, matrix, and factors
-   Classes & attributes
-   Generic & non-generic functions
-   Method dispatch

# R objects

# `vector` or `NULL`

<!-- https://adv-r.hadley.nz/vectors-chap.html#vectors-chap -->

# 
![](images/paste-1.png)



# 

![](https://d33wubrfki0l68.cloudfront.net/2ff3a6cebf1bb80abb2a814ae1cfc67b12817713/ae848/diagrams/vectors/summary-tree.png)

# Types are not classes

#  {auto-animate=true}

```{r}
x <- as.factor(c("a", "b", "c"))
x
```

#  {auto-animate=true}

```{r}
x <- as.factor(c("a", "b", "c"))
class(x)
```


# {auto-animate=true}

```{r}
x <- as.factor(c("a", "b", "c"))
typeof(x)
```


## Primary types: 

- double `0.123`
- integer `1L`
- character `"hi there"`
- logical `TRUE`

# Vectors are one type

# {auto-animate="true"}

```{r}
class(c(1, 2, 3, 4))
```

# {auto-animate="true"}

```{r}
class(c(1, "2", 3, "4"))
```

# 
::: {.r-fit-text}
<h1>Even missing values have types</h1>
:::

# {auto-animate="true"}

```{r}
class(NA_real_)
```

# {auto-animate="true"}

```{r}
class(NA_integer_)
```


# {auto-animate="true"}

```{r}
class(NA_character_)
```


# {auto-animate="true"}

```{r}
class(NA)
```



# 
::: {.r-fit-text}
<h1>Lists. The other other vector.</h1>
:::


## Lists

- contain anything you want
- contain other lists 
- vector of pointers
  - _point_ to other pieces of memory

# 

```{r}
list(dbl = 3.14, int = -1, chr = "hey, pal", bool = FALSE)
```

# Atomic vectors?

# 
::: {.r-fit-text}
<h1>"atomic vectors are **homogeneous**"</h1>
:::

:::{.caption}
Ch 20, R for Data Science
:::

#

```{r}
is.atomic(character())
```

#

```{r}
is.atomic(double())
```

# 

```{r}
is.atomic(logical())
```

# 

```{r}
is.atomic(list())
```



# 
::: {.r-fit-text}
<h1>Lists are recursive</h1>
:::

# 

```{r}
list(a = list(), b = list(c = list()))
```

# 
::: {.r-fit-text}
<h1>What about matrices and `data.frame`s? </h1>
:::


# 
::: {.r-fit-text}
<h1>Bunch of posers.</h1>
:::



# Objects are defined by their
- class and
- attributes


# create a `data.frame`

```{r}
d <- data.frame()
class(d)
```

# what is it's type?

```{r}
typeof(d)
```

# what?

# 

:::{.r-fit-text}
<h1> data frames are actually just lists masquerading as rectangles.</h1>
:::

# 

> "Data frames are actually just lists masquerading as rectangles."

_â€” <cite>Me, Finding an SPSS {haven}<cite>_

# check `attributes()`

```{r}
attributes(d)
```

# 

:::{.r-fit-text}
<h1>`data.frame`s are defined by: </h1>
:::

- `row.names`
- `names`
- `data.frame` class



# 
:::{.r-fit-text}
<h1>remove the mask with `unclass()`</h1>
:::


# 

```{r}
unclass(d)
```

## data.frames are:

- named lists 
- with named rows
- each list element must be the same length

# and matrixes? 

```{r}
m <- matrix(1:5)

class(m)
```

# 

```{r}
m <- matrix(1:5)

typeof(m)
```


# `integer`, you say?

# check `attributes()`

```{r}
attributes(m)
```


# 
::: {.r-fit-text}
<h1>What if I told you a matrix was a vector in disguise?</h1>
:::

# matrix defined by:

- `matrix` and `array` classes (sort of)
- `dim` attribute


# `unclass()` a matrix

```{r}
unclass(m)
```

# 

:::{.r-fit-text}
It's still a matrix.
:::


# so annoying...


# 
:::{.r-fit-text}
<h1>`array` is an "implicit" class</h1>
:::

they're defined by....

# `dim` attribute

```{r}
attributes(m)
```

# 

::: {.r-fit-text}
<h1>Remember, they're all vectors</h1>
:::

# 

::: {.r-fit-text}
<h1>we can remove this attribute with:</h1>
:::

```{r}
attr(m, "dim") <- NULL
m
```

# change the dimensions:

```{r}
# 1 row 5 columns
attr(m, "dim") <- c(1, 5)
m
```

# what is the class?

```{r}
class(m)
```

# but actually?

```{r}
attributes(m)
```

. . . 

lol, nope

# yet, another poser

# `factor()`

```{r}
f <- factor()
```

#

:::{.r-fit-text}
<h1>what's under the hood?</h1>
:::

```{r}
unclass(f)
```

# factors are

- integer vectors
- with `levels` attribute
- `levels` are a character vector

# 

:::{.r-fit-text}
<h1> factors are not an implicit class</h1>
:::


# 

:::{.r-fit-text}
<h1> only arrays are</h1>
:::


#  \~ le sigh \~

# What have we learned?

## Review:

- all objects are vectors
- atomic vectors and lists
- other objects are one of these with:
  - class attribute
  - any other attributes

#

:::{.r-fit-text}
Objects can have multiple classes
:::

#

:::{.r-fit-text}
example: the humble `tibble`
:::

# 

```{r}
tbl <- tibble::tibble()
class(tbl)
```

# 

:::{.r-fit-text}
Subsequent classes are a _subclass_
:::

# 

:::{.r-fit-text}
`tbl` is a subclass of `data.frame`
:::

```{r}
class(tbl)
```

# 

:::{.r-fit-text}
`tbl_df` is a subclass of `tbl`
:::

```{r}
class(tbl)
```

#

:::{.r-fit-text}
Preceding classes are a _superclass_
:::

# 

:::{.r-fit-text}
The _base class_ is the last listed
:::

```{r}
class(tbl)
```

## Class hierarchy

```{r}
class(tbl)
```

- **base class**: `data.frame`
- has 2 subclasses: `tbl` and `tbl_df`
- `tbl` is a superclass of `tbl_df`

#

:::{.r-fit-text}
classes are the basis for _dispatch_
:::

# 

:::{.r-fit-text}
S3 Function Fundamentals
:::


## S3 Functions have two parts:

- a generic 
- methods

#

```{r}
mean
```
#

:::{.r-fit-text}
`UseMethod("fn_name")` creates a "generic" function
:::

# 

:::{.r-fit-text}
Generics don't do anything
:::


# 

:::{.r-fit-text}
generics _**dispatch**_ a **_method_** 
based on an object's class
:::


# 

:::{.r-fit-text}
**_dispatch_** means to execute a function
:::

# 

:::{.r-fit-text}
a **_method_** is a class specific function
:::

# Define a generic

```{r}
generic_fn <- function(x, ...) {
  UseMethod("generic_fn")
}
```

# 

:::{.r-fit-text}
Methods have the format:
<br>`generic.method` 
:::

# 

:::{.r-fit-text}
Now you realize why putting `.` in object nams is bad, huh?
:::


# Explore S3 with `{sloop}`

```{r}
sloop::s3_methods_generic("mean")
```


# 
:::{.r-fit-text}
Generics can have defaults
:::


# 

:::{.r-fit-text}
Defaults are methods available for _**all**_ classes 
:::

# 

:::{.r-fit-text}
Used when no method is found
:::

# Example: human class

```{r}
person <- structure(
  list(first = "Josiah", last = "Parry"),
  class = "human"
)

print(person)
```

# 

```{r}
library(sloop)
s3_dispatch(print(person))
```

#

:::{.r-fit-text}
default method used
:::

# define a method

```{r}
print.human <- function(x, ...) {
  cat("Human: ", x[["last"]], ", ", x[["first"]], sep = "")
  invisible(x)
}

print(person)
```

# 

:::{.r-fit-text}
`print()` dispatches on `human` class
:::

```{r}
s3_dispatch(print(person))
```

#

:::{.r-fit-text}
Objects can have multiple classes
:::

# 

:::{.r-fit-text}
Try to include the base class
:::

```{r}
person <- structure(
  list(first = "Josiah", last = "Parry"),
  class = c("human", "list")
)
```

# 

:::{.r-fit-text}
Adding a subclass
:::

```{r}
me <- structure(
  list(first = "Josiah", last = "Parry"),
  class = c("myself", "human", "list") 
)
```

# 

```{r}
s3_dispatch(print(me))
```

# 

:::{.r-fit-text}
subclasses **inherit** behavior from superclasses
:::

```{r}
s3_dispatch(print(me))
```


# 

:::{.r-fit-text}
`"myself"` _**inherits**_ `"human"`
:::

```{r}
s3_dispatch(print(me))
```

# 

:::{.r-fit-text}
Inheritance defines shared behavior
:::

# subclass methods can:

- have their own behavior
- **and** inherit functionality

# `NextMethod()`

- tells R to continue to the next class' method

#

```{r}
print.myself <- function(x) {
  cat("Hey, that's me!\n")
  NextMethod()
}

me
```

## 

:::{.notes}
S3 is a programming system adopted by R from its predecessor S It is called s3 because it is from the third version of S

Objects in R Common Base R types Atomic vectors On top of those are data.frames and matrix

Matrix are just vectors they get their special behavior from two things: first their class and then attributes

Let's look at attributes first. Attributes are essentially metadata for any R object.

View all attributes of objects with attributes() view a specific attribute with attr(x, "attr-name")

Set attributes with attr()


- a generic function doesn't do anything
- it create a function that tells R that it's going to behave differently based on the class that is provided
- generics will not work without creating a method
- a method is a function that is "dispatched" based on the object's class
- methods are additional functions that are executed based on objects class
- a method is "dispatched" based on the detected class



- when 

:::