{
  "hash": "b06faad7cc3a14f240d04bf3173fe71f",
  "result": {
    "markdown": "---\ntitle: \"spatial analysis\" \nsubtitle: \"weights & neighbors in `sfdep`\"\nformat: \n  revealjs:\n    incremental: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n# Objective:\ncalculate the spatial lag\n\n\n## The Spatial Lag\n\n- The weighted average of a variable in a neighborhood\n\n$$Wy_i = \\sum_{j = 1}^{n} W_{ij} * yj$$\n\n- it's a formula which is tough lets break it down\n\n## $ij$\n\n:::{.incremental}\n- $i$ is the observed element of a vector (black)\n- $j$ is that element's neighbors in space (white)\n- $ij$ the neighbors of element $i$\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](spatial-lag_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## $ij$\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](spatial-lag_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n\n## $yi$\n\n- $yi$ is the observed value at each location\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](spatial-lag_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## $W_{ij}$\n\n:::{.incremental}\n- The spatial weights\n- For simplicity: _row standardized_ weights\n- $1 \\div card(i)$\n  - cardinality is the number of neighbors\n- 8 neighbors\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncardi <- 8\nwij <- rep(1, cardi) / cardi\n\nwij\n#> c(0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125)\n```\n:::\n\n:::\n\n## $\\sum_{j = 1}^{n} W_{ij} * yj$ \n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalues <- c(8.4, 15.5, 6.9, 11.5, 3, 26.8, 5.2, 0.9, 7.9)\n\n# neighbor index\nnbs <- c(1:4, 6:9)\n\n# create neighbor values\nyj <- values[nbs]\n\n# multiply each element\nwij * yj\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.0500 1.9375 0.8625 1.4375 3.3500 0.6500 0.1125 0.9875\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# the spatial lag\nsum(wij * yj)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10.3875\n```\n:::\n:::\n\n## Observed vs. Lagged\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](spatial-lag_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n## Understanding the lag\n\n- it is the average value of the neighborhood\n- \"expected value\" of the neighborhood\n- summarizes values of $x$ for an observation $i$'s neighborhood\n\n# using {sfdep} \n\na tidy interface to spdep\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sfdep)\nlibrary(dplyr)\n```\n:::\n\n\n## Identifying Neighbors\n\n- simplest way using `st_contiguity()`\n- requires `sf` or `sfc` object\n- Queen contiguity by default\n  - shared sides and corners\n  \n. . . \n  \n\n::: {.cell}\n\n```{.r .cell-code}\ndata(guerry, package = \"sfdep\")\n\nnb <- st_contiguity(guerry)\nnb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 85 \nNumber of nonzero links: 420 \nPercentage nonzero weights: 5.813149 \nAverage number of links: 4.941176 \n```\n:::\n:::\n\n\n## `nb` class objects\n\n- `nb` class from `spdep`\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$class\n[1] \"nb\"   \"list\"\n\n$region.id\n [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\"\n[16] \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\"\n[31] \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\"\n[46] \"46\" \"47\" \"48\" \"49\" \"50\" \"51\" \"52\" \"53\" \"54\" \"55\" \"56\" \"57\" \"58\" \"59\" \"60\"\n[61] \"61\" \"62\" \"63\" \"64\" \"65\" \"66\" \"67\" \"68\" \"69\" \"70\" \"71\" \"72\" \"73\" \"74\" \"75\"\n[76] \"76\" \"77\" \"78\" \"79\" \"80\" \"81\" \"82\" \"83\" \"84\" \"85\"\n\n$call\nspdep::poly2nb(pl = x, queen = queen)\n\n$type\n[1] \"queen\"\n\n$sym\n[1] TRUE\n```\n:::\n:::\n\n\n## `nb` class objects\n\n- sparse matrix (list) of neighbors\n- each element is an integer vector\n- elements are row position of neighbor\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 36 37 67 69\n\n[[2]]\n[1]  7 49 57 58 73 76\n\n[[3]]\n[1] 17 21 40 56 61 69\n```\n:::\n:::\n\n\n\n## spatial weights \n\n- `st_weights(nb)` \n- row standardized by default\n- returns list \n- each element is numeric vector with same **cardinality** as the neighbor list\n  - contains the weight for the corresponding element in the `nb` list\n  - _note: cardinality is the number of neighbors_\n\n## spatial weights\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwt <- st_weights(nb)\n\nwt[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 0.25 0.25 0.25 0.25\n\n[[2]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[3]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n```\n:::\n:::\n\n\n## spatial lag\n\n- use `st_lag(x, nb, wt)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- guerry$crime_pers\n\nst_lag(x, nb, wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 23047.50 26919.67 26195.50 14401.25 15038.67 15749.00 22111.67 13672.33\n [9] 22859.20 11475.20 12200.14 13278.67 24734.00 11752.83 17992.60 21974.40\n[17] 26711.00 19344.00 23696.71 25108.67 21643.17 18306.00 24280.00 14451.60\n[25] 21047.67 21421.33 25961.50 10869.83 13415.67 17172.17 20238.25 12504.25\n[33] 26723.00 21772.83 26462.20 19252.00 24683.20 20607.25 24412.00 19373.71\n[41] 16000.20 23993.25 20337.86 16818.67 17113.83 13013.00 22133.00 24093.75\n[49] 25661.67 22190.17 29030.00 16951.00 24509.00 24982.75 19491.50 24176.00\n[57] 27639.67 21274.33 24510.33 30166.00 23459.00 16184.00 18002.00 10910.00\n[65] 16251.25 15572.00 25884.25 23020.60 26495.00 24690.50 17339.00 25522.33\n[73] 18970.00 19701.83 21841.00 24520.40 14025.80 14565.17 13306.67 12579.00\n[81] 21529.50 23474.50 24373.17 19900.50 23373.60\n```\n:::\n:::\n\n\n\n## spatial lag\n\n- calculate by hand using lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\nij <- nb[[1]]\nwij <- wt[[1]]\nxij <- x[ij]\n\nxij * wij\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4696.25 6555.25 4698.25 7097.75\n```\n:::\n\n```{.r .cell-code}\nsum(xij * wij)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23047.5\n```\n:::\n:::\n\n\n# Using dplyr\n\n\n## Guerry \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::glimpse(guerry)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 85\nColumns: 27\n$ code_dept       <fct> 01, 02, 03, 04, 05, 07, 08, 09, 10…\n$ count           <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ ave_id_geo      <dbl> 49, 812, 1418, 1603, 1802, 2249, 3…\n$ dept            <int> 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12…\n$ region          <fct> E, N, C, E, E, S, N, S, E, S, S, S…\n$ department      <fct> Ain, Aisne, Allier, Basses-Alpes, …\n$ crime_pers      <int> 28870, 26226, 26747, 12935, 17488,…\n$ crime_prop      <int> 15890, 5521, 7925, 7289, 8174, 102…\n$ literacy        <int> 37, 51, 13, 46, 69, 27, 67, 18, 59…\n$ donations       <int> 5098, 8901, 10973, 2733, 6962, 318…\n$ infants         <int> 33120, 14572, 17044, 23018, 23076,…\n$ suicides        <int> 35039, 12831, 114121, 14238, 16171…\n$ main_city       <ord> 2:Med, 2:Med, 2:Med, 1:Sm, 1:Sm, 1…\n$ wealth          <int> 73, 22, 61, 76, 83, 84, 33, 72, 14…\n$ commerce        <int> 58, 10, 66, 49, 65, 1, 4, 60, 3, 3…\n$ clergy          <int> 11, 82, 68, 5, 10, 28, 50, 39, 42,…\n$ crime_parents   <int> 71, 4, 46, 70, 22, 76, 53, 74, 77,…\n$ infanticide     <int> 60, 82, 42, 12, 23, 47, 85, 28, 54…\n$ donation_clergy <int> 69, 36, 76, 37, 64, 67, 49, 63, 9,…\n$ lottery         <int> 41, 38, 66, 80, 79, 70, 31, 75, 28…\n$ desertion       <int> 55, 82, 16, 32, 35, 19, 62, 22, 86…\n$ instruction     <int> 46, 24, 85, 29, 7, 62, 9, 77, 15, …\n$ prostitutes     <int> 13, 327, 34, 2, 1, 1, 83, 3, 207, …\n$ distance        <dbl> 218.372, 65.945, 161.927, 351.399,…\n$ area            <int> 5762, 7369, 7340, 6925, 5549, 5529…\n$ pop1831         <dbl> 346.03, 513.00, 298.26, 155.90, 12…\n$ geometry        <MULTIPOLYGON> MULTIPOLYGON (((801150 20…\n```\n:::\n:::\n\n\n\n## In one fell swoop\n\n\n::: {.cell}\n\n```{.r .cell-code}\nguerry |> \n  transmute(\n    nb = st_contiguity(geometry),\n    wt = st_weights(nb),\n    crime_lag = st_lag(crime_pers, nb, wt)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 85 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441\nCRS:           NA\n# A tibble: 85 × 4\n   nb        wt        crime_lag                    geometry\n * <nb>      <list>        <dbl>              <MULTIPOLYGON>\n 1 <int [4]> <dbl [4]>    23048. (((801150 2092615, 800669 …\n 2 <int [6]> <dbl [6]>    26920. (((729326 2521619, 729320 …\n 3 <int [6]> <dbl [6]>    26195. (((710830 2137350, 711746 …\n 4 <int [4]> <dbl [4]>    14401. (((882701 1920024, 882408 …\n 5 <int [3]> <dbl [3]>    15039. (((886504 1922890, 885733 …\n 6 <int [7]> <dbl [7]>    15749  (((747008 1925789, 746630 …\n 7 <int [3]> <dbl [3]>    22112. (((818893 2514767, 818614 …\n 8 <int [3]> <dbl [3]>    13672. (((509103 1747787, 508820 …\n 9 <int [5]> <dbl [5]>    22859. (((775400 2345600, 775068 …\n10 <int [5]> <dbl [5]>    11475. (((626230 1810121, 626269 …\n# … with 75 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\n## Let's make something, shall we?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](spatial-lag_files/figure-revealjs/unnamed-chunk-40-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "spatial-lag_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}