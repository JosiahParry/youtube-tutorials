---
title: "understanding functions"
format: 
  revealjs:
    incremental: true
execution:
  echo: true
---


```{r}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
```


# R is _functional_

:::{.notes}
As you know, R is a programming language. 
And all programming languages fall broadly into 2 categories
Object Oriented Programming languages and 
functional programming langauges
R is a functional programming language

:::

# $y = mx + b$


:::{.notes}
functional programming languages emphasize the use of functions
y = mx + b is a function that anyone who paid even an iota of attention
in high school remembers
:::

# $f(x) = mx + b$ {auto-animate=true}

# $f(x) = mx + b$ {auto-animate=true}

```{r, eval = TRUE, echo = FALSE}
x <- 1:5
y <- x * 3.5 + 2

data.frame(x, y) |> 
  reactable::reactable()
```


:::{.notes}
y = mx + b can be rewritten like this 
where f(x) = mx + b 
or read differently mx + b is a function of x
we plug in values of x, hence a function of x and get new values
:::

# functions do things

:::{.notes}
functions always do something.
:::


# $input \implies output$

:::{.notes}
functions take an input 
and produce an output
:::

# anatomy of a function {auto-animate=true}

```{r, eval = FALSE}
function()
```


:::{.notes}
functions are created using the function keyword
:::

# anatomy of a function {auto-animate=true}

```{r, eval = FALSE}
function(arguments)
```

:::{.notes}
functions typically take one or more arguments 
:::


# anatomy of a function {auto-animate=true}

```{r, eval = FALSE}
function(arg1, arg2)
```

:::{.notes}
arguments are unquoted names, separated by commas
:::


# anatomy of a function {auto-animate=true}

```{r, eval = FALSE}
function(arguments) {
  
}
```

:::{.notes}
functions contain a body
that is contained within the curly braces 
:::


# anatomy of a function {auto-animate=true}

```{r, eval = FALSE}
function(arguments) {
  # function body
  # . . . 
  # do things here
}
```

:::{.notes}
the body of the function defines
what a function will actually do
:::

# anatomy of a function {auto-animate=true}

```{r, eval = FALSE}
function(arguments) {
  arguments
}
```

:::{.notes}
the body of a function can contain any valid
R code that you would like to put in there
:::


# anatomy of a function {auto-animate=true}

```{r, eval = TRUE}
print_argument <- function(arguments) {
  arguments
}
```

:::{.notes}
like all things in R, functions are objects
functions are special because you create the object and then
call that object taking other objects as input! 
:::

# anatomy of a function {auto-animate=true}

```{r, eval = TRUE}
print_argument("the first argument")
```



# anatomy of a function {auto-animate=true}

```{r, eval = TRUE}
print_argument <- function(arguments) {
  10
}
```

:::{.notes}
whatever is printed last in a function
gets returned from the function
:::



# anatomy of a function {auto-animate=true}

```{r, eval = TRUE}
print_argument <- function(arguments) {
  10
}
```

```{r, echo = TRUE, eval = TRUE}
print_argument("hello world")

```




## functions rock because... 


- repeating code is easy
- easier to read
- makes your code simpler
- (somewhat) easy to share


# making the slope intercept function

#  {auto-animate=true}

```{r, eval = FALSE}
slope_intercept <- 
```


#  {auto-animate=true}

```{r}
slope_intercept <- function()
```


#  {auto-animate=true}

```{r}
slope_intercept <- function(x)
```


#  {auto-animate=true}

```{r}
slope_intercept <- function(x) {
  
}
```


#  {auto-animate=true}

```{r}
slope_intercept <- function(x) {
  m <- 2.5
}
```


#  {auto-animate=true}

```{r}
slope_intercept <- function(x) {
  m <- 2.5
  b <- 10
}
```


#  {auto-animate=true}

```{r}
slope_intercept <- function(x) {
  m <- 2.5
  b <- 10
  
  m * x + b 
}
```


#  

```{r, eval = TRUE, echo = FALSE}
slope_intercept <- function(x) {
  m <- 2.5
  b <- 10
  
  m * x + b 
}
```

```{r, eval = TRUE}
#| code-line-numbers: "1|2"
x <- 1:10
y <- slope_intercept(x)
```

. . . 

```{r, echo = FALSE, eval = TRUE}
y
```

# 

```{r, eval = TRUE}
plot(x, y)
abline(10, 2.5)
```

# function arguments

:::{.notes}
let's be a bit more explicit with regards to function 
arguments
:::


:::{.notes}
think of function arguments as objects that are 
only available in the body of the function. to 
access the value of the argument we refer to the argument 
as if it is a regular R object
:::

## function arguments

```{r, eval = TRUE}
#| code-line-numbers: "1|2|5|"
add <- function(x, y) {
  x + y 
}

add(10, 2)
```


# default arguments {auto-animate=true}

. . .

```{r}
power <- function(x, power = 1) {
  x ^ power
}
```

:::{.notes}
in the examples so far each argument has not had a default value.
we can set the default value of a function in the function definition
by using an equal sign.

the argument power has a default value of 1
the argument x does not have a default value
:::


# default arguments {auto-animate=true}


```{r, eval = TRUE}
power <- function(x, power = 1) {
  x ^ power
}

power(3)
```



:::{.notes}

since there is a default value for the argument `power` which is set to
1 the power function will always return x to the first power which is
x itself
:::


# missing defaults are required

```{r, eval = TRUE, error = TRUE}
power()
```

:::{.notes}
when a function is called without any arguments, it resorts to 
all of the default arguments
but, if there is an arguments _without_ a default value the code 
errors out. thats because arguemnts without defaults are required arguments
:::

# handle with care

. . . 

`missing(arg)` checks if arguments are missing! 


:::{.notes}
so we should always be ready to handle missing arguments if we 
need to.
we can capture if arguments are missing using the ... yup. missing
function. it returns a true or false value depending on if the 
argument is missing or not
:::

# {auto-animate=true}

```{r}
is_missing <- function(x) {
  missing(x)
}
```


:::{.notes}
missing can be super helpful if we want to have special 
behavior if an acecks rgument is missing
this function checks see if the argument `x` is missing or not
very simple and quite useless honestly. 
but it gets the point accross, right?
:::

# {auto-animate=true}

```{r, eval = TRUE}
is_missing <- function(x) {
  missing(x)
}

is_missing()
```



:::{.notes}
if we run the function without any arguments, guess what? 
its missing!
:::

# {auto-animate=true}

```{r, eval = TRUE}
is_missing <- function(x) {
  missing(x)
}

is_missing("nope!")
```

:::{.notes}
and if we give it a value, there's not a missing value! 
:::

# abort early! 

. . . 

if things aren't looking good, `rlang::abort()`

:::{.notes}
now, what if when we have a missing argument we want to 
exit the function? 
rlangs abort function to the rescue
:::



# {auto-animate=true}

```{r, error=FALSE, eval = FALSE}
rlang::abort("something isn't right ...")
```


:::{.notes}
the simplest way to use this function is to pass a message to 
abort and it will cause the function to stop and print out
the error message
:::


# {auto-animate=true}

```{r, error=TRUE, eval = TRUE}
rlang::abort("something isn't right ...")
```

:::{.notes}
like this
:::

# {auto-animate=true}

```{r eval = TRUE}
is_missing <- function(x) {
  if (missing(x)) {
    rlang::abort("`x` shouldn't be missing!")
  }
  x
}
```


# {auto-animate=true}

```{r eval = TRUE, error = TRUE}
is_missing()
```


# {auto-animate=true}

```{r eval = TRUE}
is_missing("x isn't missing now!!!!")
```


# another example

# 

```{r}
#| code-line-numbers: "2|3|6"
power <- function(x, power = 1) {
  if (power == 0) {
    rlang::abort("power cannot be 0")
  }
  
  x ^ power
}
```


# 

```{r, eval = TRUE, error = TRUE}
#| code-line-numbers: "9"
power <- function(x, power = 1) {
  if (power == 0) {
    rlang::abort("power cannot be 0")
  }
  
  x ^ power
}

power(3.14159, power = 0)
```

# 

```{r, eval = TRUE, error = TRUE}
#| code-line-numbers: "9"
power <- function(x, power = 1) {
  if (power == 0) {
    rlang::abort("power cannot be 0")
  }
  
  x ^ power
}

power(3.14159, power = 2)
```

# putting it together {auto-animate=true}


```{r}
#| code-line-numbers: "1"
average <- function(x, na.rm = TRUE) {
}
```

# {auto-animate=true}


```{r}
#| code-line-numbers: "2|3"
average <- function(x, na.rm = TRUE) {
  if (!is.numeric(x)) {
    rlang::abort("`x` must be numeric")
  } 
}
```


#  {auto-animate=true}


```{r}
#| code-line-numbers: "6"
average <- function(x, na.rm = TRUE) {
  if (!is.numeric(x)) {
    rlang::abort("`x` must be numeric")
  } 
  
  if (na.rm) {
    
  }
}
```


# {auto-animate=true}


```{r}
#| code-line-numbers: "7|8"
average <- function(x, na.rm = TRUE) {
  if (!is.numeric(x)) {
    rlang::abort("`x` must be numeric")
  } 
  
  if (na.rm) {
    missing_index <- is.na(x)
    x <- x[!missing_index]
  }
}
```


# {auto-animate=true}


```{r eval=TRUE}
#| code-line-numbers: "11"
average <- function(x, na.rm = TRUE) {
  if (!is.numeric(x)) {
    rlang::abort("`x` must be numeric")
  } 
  
  if (na.rm) {
    missing_index <- is.na(x)
    x <- x[!missing_index]
  }
  
  sum(x) / length(x)
}
```



# 

```{r, eval = TRUE}
average(1:100)
```


#

```{r, eval = TRUE, error = TRUE}
average(c("one", "two", "three"))
```

#

```{r, eval = TRUE, error = FALSE}
average(c(1:10, NA, 11:20), na.rm = FALSE)
```



# that's the basics


# recap

##  functions:

- are objects
- that take inputs (arguments)
- return an output
- contain valid R code

## make good functions by:

- handle missing arguments
- exiting the function early
- checking types

# write your own function