---
title: "Valve"
subtitle: "_R belongs in production_"
format: 
  revealjs:
    theme: [dark, styles.scss]
    incremental: true
echo: true
output-location: fragment
---

```{r, include = FALSE}
options(width = 75)
knitr::opts_chunk$set(message = TRUE, eval = FALSE)
```

```{css, echo = FALSE}
.center h2 {
  text-align: center;
}
```

# It's been a while.

# Valve {.center}

. . .

Makes R go brrrrrrrr

# 

![](images/paste-1.png)

# 

![](images/paste-2.png)

<!-- <https://www.quora.com/I-have-heard-that-R-machine-learning-models-cannot-be-put-into-production-What-stops-R-models-from-being-put-into-production> -->

# 

![](images/paste-5.png) <!-- Joe Byron -->

# 

::: r-fit-text
*`"production"`*
:::

# R belongs in production

# You need to learn how

![](images/paste-6.png)

::: r-fit-text
usable by other systems
:::

# Enter `REST`ful APIs

# if i've lost you...

![](images/paste-15.png)

# REST uses http

*what the internet is based on*

# 

::: r-fit-text
http is a universal language
:::

# 

::: r-fit-text
Plumber turns R into REST endpoints
:::

![](images/paste-13.png)

# Valve can help.

# 

![](images/paste-16.png)

# 

![](images/paste-18.png)

# 

![](images/paste-21.png)

# 

![](images/paste-22.png){fig-align="center"}

# 

![](images/docker.png)

# 

![](images/DO_Logo_Vertical_White.png){fig-align="center"}

# ![](images/paste-24.png)

# 

![](images/paste-25.png)

# Akin to Gunicorn

![](images/paste-26.png)

# Plumber 101

# {auto-animate=true}

``` r
function(x, y) {
  x + y
}
```

# {auto-animate=true}

``` r
#* @get
function(x, y) {
  x + y
}
```

# {auto-animate=true}

``` r
#* @get /add-2
function(x, y) {
  x + y
}
```

# demo plumber api

# excalidraw: plumber in a nutshell

# 

![](images/paste-10.png){fig-align="center"}


# R is single threaded

. . .

*so is Python üêç*

# Built for

![](images/plumber.png){fig-align="center"}

# Written in

![](images/rustacean-flat-happy.png){fig-align="center"}

# Powered by

![](images/tokio.svg){fig-align="center" width="500"}
 


# Valve

# 

![](images/paste-11.png){fig-align="center"}

# Installing Valve

# 

![](images/paste-12.png){fig-align='center'}

# 

:::{.r-fit-text}
`cargo install valve-rs --no-default-features`
:::

## command line interface

```{shell}
valve --help
Usage: valve [-h <host>] [-p <port>] [-n <n-max>] [-w <workers>] [-f <file>] [--check-unused <check-unused>] [--max-age <max-age>] [--n-min <n-min>]

Distribute your plumber API in parallel.

Options:
  -h, --host        host to serve APIs on
  -p, --port        the port to serve the main application on
  -n, --n-max       the maximum number of plumber APIs to spawn
  -w, --workers     number of Tokio workers to spawn to handle requests
  -f, --file        path to the plumber API (default `plumber.R`)
  --check-unused    default 10. Interval in seconds when to check for unused
                    connections
  --max-age         default 5 mins. How long an API can go unused before being
                    killed in seconds.
  --n-min           the maximum number of plumber APIs to spawn
  --help            display usage information
```

# Install as R package 

```{r, eval = FALSE}
install.packages(
    "valve", 
    repos = c(
      "https://josiahparry.r-universe.dev", 
      "https://cloud.r-project.org"
      )
)
```

## R package

```{r, eval = FALSE}
valve_run(
  filepath = "plumber.R",
  host = "127.0.0.1",
  port = 3000,
  n_min = 1,
  n_max = 3,
  workers = n_max,
  check_unused = 10,
  max_age = 300
)
```

------------------------------------------------------------------------

Hey everyone it's Josiah. I've been grinding working on a new tool for a few months now. And I'm damn excited to let you in on my secret sauce. It's called Valve and it's going to make R in production kick ass even more.

We've all seen those click bait articles saying "Don't Put R in production" or telling you that R can't make machine learning models for production. That's a bunch of malarkey. Those "hot takes" are uninformed and can be applied to other languages such as Python.

Let's get right down to it. Let's talk "production." When I say "production" I'm talking about making your code work with any other system. And that's where RESTful APIs come in. If I've lost you at "RESTful", watch my previous video her. REST APIs provide a language-agnostic way to expose functionality over the web. \\REST relies on HTTP, which is the foundation of the internet and is a common tongue. It's like if Esperanto actually worked.

Plumber is an R package that converts your R functions into a RESTful API meaning any tool that can communicate in HTTP can call your R functions. It converts R code like this into an http endpoint.

![](images/paste-13.png)

At it's core Valve is a web server that runs multiple {plumber} APIs in parallel. Valve spins up and down plumber APIs as needed. It's designed to work with any existing plumber API. And because of that it supports {vetiver} out of the box. Vetiver is a framework built by Julia Silge and Isabel Zimmerman from Posit that simplifies putting machine learning models built with tidymodels into a production setting. And since, the goal is R in production, Valve can be easily integrated into Docker containers and deployed with DigitalOcean, AWS, Azure, or whatever other orchestration tools you have available.

Valve is akin to Gunicorn for Flask apps and FastAPI.

To understand why Valve is so powerful, we need to first understand how plumber works and its limitations. Plumber works by writing a function definition and providing annotations using a special comment character `#*`. Let's take a look at a very simple example.

The three main components of a plumber API are:

-   the function definition

-   the request type

-   endpoint

If we run this plumber API we have a nice Swagger UI that we can use to test out our query with.

In a nutshell plumber works by spawning a single web server using the {httpuv} R package. The webserver captures incoming http requests, captures the provided parameters, body, and requested endpoint. Based on the endpoint, it passes the parameters to the function. The result is then "serialized" into the correct output type. By default, this is `json`.

![](images/paste-8.png)

For example, we might be calling the `/add-2` endpoint. The process looks a bit like this. We have a GET request. The endpoint is colored red. Then the parameters are colored blue. The request is captured by the web-server. The endpoints are checked. Then the parameters are passed to the function and the user gets the result.

![](images/paste-10.png)You can see how this is powerful! But there is one major thing holding this back. This is all running in a single R process. R, like Python, is single threaded. That means each request that comes in has to be added to a queue. The next request cannot be processed until the previous one has been.

Valve helps by running multiple plumber APIs concurrently. Valve is built specifically for plumber, in Rust, and by leveraging the power Tokio framework. Instead of having a single plumber API and a single R process handling all requests, there is another web server handling all incoming requests. This web server is build using Tokio.

![](images/paste-11.png)

The app has a number of pre-specified worker threads. Each worker is capable of taking an incoming request, processing it, and returning a response. These worker threads will delegate the request to another plumber API. These plumber APIs are sitting in a connection pool waiting to be accessed. The APIs will spawn and de-spawn according to the amount of incoming traffic.

What this means is that instead of being able to handle 1 request at a time, we can handle as many requests as there are workers concurrently. This allows us to take advantage of more than a single R process at a time and, as a result, we can utilize more of the compute resources available to us.

So how do you install Valve? There are two ways in which you can install Valve. The first is to use the Rust package manager Cargo. This is my personal recommendation. If you don't have Rust and cargo installed, don't worry it is the second easiest language I've ever installed.

![](images/paste-12.png)

Follow this one liner and it'll handle the installation for you.

To install Valve with cargo run

``` shell
cargo install valve-rs --no-default-features
```

Doing this will install the Valve binary and make it available to you as a command line tool. Alternatively, if you want to install valve as an R package you can do so via the R-universe. The R-universe version has pre-built binaries for Windows, Mac, and Ubuntu which means you do not need to have rust installed. But again, its easy, so give it a shot!

``` r
install.packages(
    "valve", 
    repos = c("https://josiahparry.r-universe.dev", "https://cloud.r-project.org")
)
```

To follow along with the rest of these demos you can check out code in the github repository.

Here I want to demo just how easy it is to use Valve and what the experience is like. For this simple example we will run a plumber API with one endpoint `/zzz` which will sleep for a specified amount of time. We'll create a Valve app with 10 workers and plumber APIs.

{{ demo here }}

You'll notice that only one API is spawned at the start. This is because connections are spawned based on incoming demand. As we send more requests, the plumber APIs will spawn. If, after a specified amount of time, they go stale, they will de-spawn. However, you do have the ability to control the minimum number of plumber APIs.

We're going to create a simple function `sleep()` which will call the zzz endpoint at a specified port for a specified amount of time. We'll use `furrr` to create 10 sessions and call the function 10 times on valve app.

```{r}
sleep <- function(port, secs) {
  httr2::request(
        paste0("127.0.0.1:", port, "/sleep?zzz=", secs)
    ) |> 
    httr2::req_perform() |> 
    httr2::resp_body_string()
}
```

Now with the function defined we can use furrr to run the function in parallel

```{r}
library(furrr)
plan(multisession, workers = 10)
```

We will call the function 10 times using `future_map()` . The first time this runs we can see that more plumber APIs are being spawned. This takes somewhere between 3 and 4 seconds the first time we run it.

```{r}
start <- Sys.time()
furrr::future_map(1:10, ~ sleep(3000, 2))
multi_total <- Sys.time() - start
multi_total 
#> Time difference of 2.055788 secs
```

If we run this again, we get something much closer to two seconds total for sending all 10 requests.

Now, we can do the same thing with all 10 workers calling just one of the spawned plumber APIs.

```{r}
start <- Sys.time()
furrr::future_map(1:10, ~ sleep(24817, 2))
(total <- Sys.time() - start)
#> Time difference of 20.04956 secs
```

That's a huge different. That is a lot more performance that we are squeezing out of this plumber API by creating multiple to run concurrently.

In an R session load {valve}.

``` r
library(valve)
```

Next, we will use the function `valve_run()` to run our plumber API. This function has a lot of handy defaults to moderately scale your plumber API. By default it looks for the file `plumber.R` in your working directory.

``` r
valve_run("plumber.R", n_max = 10)
```

The CLI works just like the R function with two differences. We call it from the command line and the syntax is a smidgen different.

From the command line we can run `valve ‚Äìhelp` to see the arguments that we can provide. The CLI has the same defaults as the R package.

Now I want to illustrate scaling a machine learning model with {vetiver} and valve. They do so by wrapping the model into a plumber API.

I've created a sample plumber API based on Julia's recent Tidy Tuesday screencast in which she creates an XGBoost model.

![](images/paste-14.png)

I've taken this example and used vetiver to create a plumber API to serve predictions from this model. One could deploy this API as is with Docker or something like Posit Connect. If going down the Docker approach, we can make this a bit more performant by using Valve.

To make this into a Valve app all we need to do is pass provide the plumber API file to valve and we're on our way! I've written some simple bench marks using drill to compare the performance of the two approaches. With valve we will use 5 concurrent processes and test it.

\-\-\-\--

Explain the benefits of using Docker for scaling production services. Describe how Valve seamlessly integrates with Docker, making it an ideal solution for large-scale deployments. Briefly outline the steps to containerize and deploy a Valve-powered R application using Docker. Conclusion

Summarize the main points covered in the video. Reiterate the significance of Valve in simplifying and enhancing the scalability of R-based applications in production. Encourage viewers to explore Valve further, experiment with it, and share their experiences. Call to Action

Invite viewers to like, share, and subscribe to your channel for more informative content. Provide links to the Valve GitHub repository, documentation, and any relevant resources. Encourage viewers to leave comments or questions, and assure them that you'll be actively engaging with their feedback. Remember to maintain a clear and engaging speaking style, use visuals where necessary, and keep the pacing of the video dynamic to hold the audience's attention throughout. Good luck with your YouTube video!