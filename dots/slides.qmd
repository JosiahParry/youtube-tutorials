---
title: ". . ."
format: 
  revealjs:
    incremental: true
echo: true
---


:::{.notes}
you may have seen these before
you may have an intuition of what they are 
but do you really know what they do and how they work?
:::

# "dots"


:::{.notes}
those three little dots are, quite uncreatively, called dots.
And they're everywhere in R
:::


## `dplyr::select(.data, ...)`

> One or more unquoted expressions separated by commas. Variable names can be used as if they were positions in the data frame, so expressions like x:y can be used to select a range of variables.

:::{.notes}
there's a really good chance you've used the select function from dplyr
select uses dots—albeit a special kind called dynamic dots—to let you select many 
different columns with freedom
:::

## `dplyr::mutate(.data, ...)`


>  Name-value pairs. The name gives the name of the column in the output.

:::{.notes}
dots are also used in the mutate function from dplyr to let you create any 
columns you'd like by passing in expressions to names
:::

## `paste(...)`

> one or more R objects, to be converted to character vectors.

:::{.notes}
the function paste from base R lets you pass in as many R objects as you would like
to create nice character strings
:::

## `lapply(x, FUN, ...)`

> optional arguments to FUN

# what is `...` actually doing?

:::{.notes}
so if dots do all these things what do they actually do?
:::



# dots pass arguments

:::{.notes}
everything that dots do can be distilled to 
passing arguments. 

how we do this and in what contexts we do this can be varied 
to a fabulous degree
:::


## 2 primary uses

- passing arguments from one function to another
- with S3 methods


:::{.aside}
https://adv-r.hadley.nz/functions.html#fun-dot-dot-dot
:::

:::{.notes}
according to advanced R there are two primary uses of dots
they are to pass arguments from one function to another 
and secondly, which we will not go over in this video,
is the use of dots to allow different s3 methods to take 
different arguments (like the very very very many predict methods)
:::


# pass args with `...`

:::{.notes}
lets first look at how we can pass arguments direclty 
into another function using dots
:::

# {auto-animate=true}

```{r}
print_dots <- function(...) {
}
```

:::{.notes}
to use dots in a function you have to specify an argument with the dots
:::


# {auto-animate=true}

```{r}
print_dots <- function(...) {
  paste(...)
}
```


:::{.notes}
to pass the dots directly into another function you can include them
as an argument.

R will match the arguments for us like magic.

here we paste together whatever we put in to the function
:::

# {auto-animate=true}

```{r}
print_dots <- function(...) {
  paste(...)
}

print_dots("hello", "world")
```

:::{.notes}
lacking creativity lets print hello world
:::

# {auto-animate=true}

```{r}
print_dots("my favorite letter is", letters[1:10])
```

# a real example

:::{.notes}
this way of using dots, when you get it, is  super powerful
it's actually underpinning a majority of the functions in my package sfdep.
lets take a look at one of them as an example
:::

# 

```{r}
sfdep::local_g
```
:::{.notes}
here'es a helpful tip. if you remove the parens from a function it will print its definition
this function takes 3 required arguments
:::

# {auto-animate=true}

```{r, eval = FALSE}
#| code-line-numbers: "1|2|3"
function(x, nb, wt, alternative = "two.sided", ...) {
  listw <- recreate_listw(nb, wt)
  res <- spdep::localG(x, listw, alternative = alternative, ...)
  unclass(res)
}
```


:::{.notes}

Line 1: 
x, nb, wt, are required, alternative is set to a default value of two.sided
and the dots as an argument.

the reason why dots in this case is so powerful is that 
it lets us take different objects, restructure them into the 
required format, then pass in arguments to another function


Line 2: 

spdep uses a `listw` object which contains two lists. 1 for identifying neighbors and the 2nd to store the spatial weights for them.

In the line we turn our arguments nb and wt into an object called listw

Line 3:

then x and the new listw function are passed to localG if any other arguments are passed in via dots they are sent to spdep
:::

# {auto-animate=true}

```{r, echo = FALSE}
library(spdep)
orig <- spData::africa.rook.nb
listw <- nb2listw(orig)
x <- spData::afcon$totcon

nb <- listw[[2]]
wt <- listw[[3]]
```

```{r}
spdep::localG(x, listw)
```

:::{.notes}
let's try calling the function as it is with its default arugments using 
spdep directly
:::


# {auto-animate=true} 



```{r, eval = TRUE}
sfdep::local_g(x, nb, wt)
```


:::{.notes}
compare this to the function that calls spdep but with different arguments.
the results are identical
:::

# 

```{r, echo = TRUE, eval = TRUE}
args(spdep::localG)
```

:::{.notes}

spdep::localG takes additional arguments that aren't handled by sfdep directly
we can try setting one of these arguments by dots
:::

# {auto-animate=true} 


```{r, eval = FALSE}
sfdep::local_g(x, nb, wt, return_internals = TRUE)
```

. . .

```{r, include = TRUE, echo = FALSE}
sfdep::local_g(x, nb, wt, return_internals = TRUE)
```

:::{.notes}

the localG function has an argument `return_internals` that additional data 
as an attribute. this isn't a defined argument in sfdep::local_g but it can 
be accessed through dots

when the object is printed the difference is quite pronounced! 
:::

# 


:::{.notes}

dots are useful when used by themselves with no special sauce. 
but its not the only way that they can be utilized. we can actually 
"capture" ... them
:::

# capture

:::{.notes}
by capture, i mean make them less ephemeral and "capturing" them into a 
data format the is familiar and useful like a list
:::


# {auto-animate=true}

```{r}
#| code-line-numbers: "2|"
dots <- function(...) {
  list(...)
}
```

:::{.notes}
capturing dots is actually quite simple. 
the `list()` function is acting like a pokeball. 
capturing and taming our wild arguments
:::

# {auto-animate=true}

```{r}
dots <- function(...) {
  list(...)
}

dots(hello = "world")
```

:::{.notes}
if we pass in the value "world" to an argument "hello"
we receive a named list
this is only true, though, if we use argument names
if we don't...
:::

# {auto-animate=true}

```{r}
dots("hello", "world")
```

:::{.notes}
we are returned a list without names
:::


# use case 

crafting data frames

# {auto-animate=true}

```{r}
#| code-line-numbers: true
data_frame <- function(...) {
  dots <- list(...)
  list2DF(dots)
}
```


. . .

```{r}
data_frame(x = 10, y = 20)
```


:::{.notes}
we can define a simple function that 
captures dots into a list that then passes that list 
to list2DF to create a data frame

. . . 

we can use it to create a data frame with two columns x and y
but what about unnamed arguments to dots? 
. . . 

this works but it has unnamed columns. that's bad behaviortw
:::



# {auto-animate=true}

```{r}
#| code-line-numbers: "3"
data_frame <- function(...) {
  dots <- list(...)
  dots_names <- names(dots)

  list2DF(dots)

}
```



# {auto-animate=true}

```{r}
#| code-line-numbers: "5,6,7"
data_frame <- function(...) {
  dots <- list(...)
  dots_names <- names(dots)

  if (is.null(dots_names) || "" %in% dots_names) {
    stop("all arguments must be named")
  }

  list2DF(dots)

}
```



# {auto-animate=true}

```{r, error = TRUE}
data_frame(1:10, letters[1:10])
```

. . .

```{r}
data_frame(id = 1:10, alphabet = letters[1:10])
```


# dots helpers

. . .
rarely useful, but good to know!

# reference by position

. . .

each argument as `..1`, `..2`, `..3`, `..n`

# {auto-animate=true}

```{r}
add2 <- function(...) {
  ..1 + ..2
}
```

. . .

```{r}
add2(3, .14)
```

# `...length()`

. . . 

how many arguments? 


# 

```{r}
nargs <- function(...) {
  ...length()
}
```


. . .

```{r}
nargs(1, 2, 3, 4, 5)
```

# arg `n`

`...elt(n)`


# first and last args

```{r}
#| code-line-numbers: "2|3|4|6"
first_last <- function(...) {
 arg1 <- ..1 
 n <- ...length()
 last_arg <- ...elt(n)
 
 list(arg1, last_arg)
}
```


. . .

```{r}
first_last("first argument", 2, NA, Inf)
```


# WARNING:

. . .

unused dots are "swallowed" 


# 

```{r}
add2(3, 0.14, 10)
```


# check yer dots

`r-lib/ellipsis`: Tools for Working with ...


# 

`ellipsis::check_dots_used()`

- error if any arguments passed to dots aren't used

# 

```{r}
#| code-line-numbers: "2"
add2 <- function(...) {
  ellipsis::check_dots_used()
 
  ..1 + ..2
}
```

# 

```{r}
add2(3, 0.14)
```

. . .

```{r, error = TRUE}
add2(3, 0.14, 0.0015)
```

# `{ellipsis}` helpers

- `check_dots_empty()`
- `check_dots_unnamed()`


# 

```{r}
#| code-line-numbers: "3"
data_frame <- function(...) {
  dots <- list(...)
  ellipsis::check_dots_empty()
  
  list2DF(dots)
}
```

. . .

```{r, error = TRUE}
data_frame(y = pi, exp(1))
```

# but wait, there's more! 

. . . 

but that's for a later time

# `{rlang}` dynamic dots 

https://rlang.r-lib.org/reference/dyn-dots.html


## recap

Dots can: 

- pass arguments from one function to another
- be collected using `list()`
- be sneaky and "swallow" arguments

. . . 

You should check them with `{ellipsis}`

# what's next?

# thanks! 
